.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.13.
.TH OUTCOIN-QT "1" "October 2024" "outcoin-qt v0.21.4.0" "User Commands"
.SH NAME
outcoin-qt - Outcoin GUI client
.SH SYNOPSIS
.B outcoin-qt
.RI [ options ]
.RI [ URI ]
.SH DESCRIPTION
.B outcoin-qt
is a graphical user interface for interacting with the Outcoin network.
It provides a user-friendly way to send and receive Outcoin, manage a wallet, and view the blockchain.
.SH OPTIONS
.SS General options
.TP
.B -?
Print this help message and exit
.TP
.B -version
Print version and exit
.TP
.B -conf=<file>
Specify configuration file
.TP
.B -datadir=<dir>
Specify data directory
.TP
.B -checklevel=<n>
How thorough the block verification of -checkblocks is (0-4, default: 3)
.TP
.B -checkblocks=<n>
How many blocks to check at startup (default: 288, 0 = all)
.TP
.B -dbcache=<n>
Set database cache size in megabytes (4 to 16384, default: 450)
.TP
.B -loadblock=<file>
Imports blocks from external file on startup
.TP
.B -par=<n>
Set the number of script verification threads (-16 to 16, 0 = auto, <0 = leave that many cores free, default: 0)
.TP
.B -persistmempool
Whether to save the mempool on shutdown and load on startup (default: 1)
.TP
.B -pid=<file>
Specify pid file
.TP
.B -prune=<n>
Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >550 = automatically prune block files to stay under the specified target size in MiB)
.TP
.B -reindex-chainstate
Rebuild chain state from the currently indexed blocks
.TP
.B -reindex
Rebuild chain state and block index from the blk*.dat files on disk
.TP
.B -txindex
Maintain a full transaction index, used by the getrawtransaction rpc call (default: 0)
.TP
.B -blockfilterindex=<type>
Maintain an index of compact block filters by type (default: 0, "basic" indicates basic filters)
.TP
.B -coinstatsindex
Maintain coinstats index used by the gettxoutsetinfo rpc call (default: 0)
.SS Connection options
.TP
.B -addnode=<ip>
Add a node to connect to and attempt to keep the connection open
.TP
.B -banscore=<n>
Threshold for disconnecting misbehaving peers (default: 100)
.TP
.B -bantime=<n>
Number of seconds to keep misbehaving peers from reconnecting (default: 86400)
.TP
.B -bind=<addr>
Bind to given address and always listen on it. Use [host]:port notation for IPv6
.TP
.B -connect=<ip>
Connect only to the specified node(s)
.TP
.B -discover
Discover own IP address (default: 1 when listening and no -externalip or -proxy)
.TP
.B -dns
Allow DNS lookups for -addnode, -seednode and -connect (default: 1)
.TP
.B -dnsseed
Query for peer addresses via DNS lookup, summary of connections to peers via -dnsseed-stats, and listen for incoming connections via DNS seeding unless -connect is used or -listen is set to 0 (default: 1)
.TP
.B -externalip=<ip>
Specify your own public address
.TP
.B -forcednsseed
Always query for peer addresses via DNS lookup, even if no peers are required (default: 0)
.TP
.B -listen
Accept connections from outside (default: 1 if no -proxy or -connect)
.TP
.B -listenonion
Automatically create Tor onion service (default: 1)
.TP
.B -maxconnections=<n>
Maintain at most <n> connections to peers (default: 125)
.TP
.B -maxreceivebuffer=<n>
Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)
.TP
.B -maxsendbuffer=<n>
Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)
.TP
.B -maxtimeadjustment
Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: 4200)
.TP
.B -onion=<ip:port>
Use separate SOCKS5 proxy to reach peers via Tor onion services (default: -proxy)
.TP
.B -peerblockfilters
When querying for blocks, request bloom filters for transactions that match the wallet's addresses.
.TP
.B -port=<port>
Listen for connections on <port> (default: 19206, testnet: 19207)
.TP
.B -proxy=<ip:port>
Connect through SOCKS5 proxy
.TP
.B -proxyrandomize
Randomize credentials for every proxy connection. This enables Tor stream isolation (default: 1)
.TP
.B -seednode=<ip>
Connect to a node to retrieve peer addresses, and disconnect
.TP
.B -timeout=<n>
Specify connection timeout in milliseconds (minimum: 1, default: 5000)
.TP
.B -torcontrol=<ip>:<port>
Tor control port to use if onion listening is enabled (default: 127.0.0.1:9051)
.TP
.B -torpassword=<pass>
Tor control port password (default: empty)
.TP
.B -upnp
Use UPnP to map the listening port (default: 0)
.TP
.B -whitebind=<addr>
Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6
.TP
.B -whitelist=<netmask>
Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times. Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway
.SS Wallet options
.TP
.B -disablewallet
Do not load the wallet and disable wallet RPC calls
.TP
.B -keypool=<n>
Set key pool size to <n> (default: 1000)
.TP
.B -rescan
Rescan the block chain for missing wallet transactions on startup
.TP
.B -salvagewallet
Attempt to recover private keys from a corrupt wallet.dat on startup
.TP
.B -spendzeroconfchange
Spend unconfirmed change when sending transactions (default: 1)
.TP
.B -txconfirmtarget=<n>
If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: 6)
.TP
.B -upgradewallet
Upgrade wallet to latest format on startup
.TP
.B -wallet=<path>
Specify wallet file (within data directory)
.TP
.B -walletbroadcast
Make the wallet broadcast transactions (default: 1)
.TP
.B -walletnotify=<cmd>
Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)
.TP
.B -zapwallettxes=<mode>
Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup (1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)
.SS RPC server options
.TP
.B -server
Accept command line and JSON-RPC commands
.TP
.B -rest
Accept public REST requests (default: 0)
.TP
.B -rpcbind=<addr>
Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)
.TP
.B -rpccookiefile=<loc>
Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)
.TP
.B -rpcuser=<user>
Username for JSON-RPC connections
.TP
.B -rpcpassword=<pw>
Password for JSON-RPC connections
.TP
.B -rpcport=<port>
Listen for JSON-RPC connections on <port> (default: 19205, testnet: 19215, signet: 39205, regtest: 19553)
.TP
.B -rpcallowip=<ip>
Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times
.TP
.B -rpcthreads=<n>
Set the number of threads to service RPC calls (default: 4)
.SH COPYRIGHT
2009-2021 The Bitcoin Core developers
.SH SEE ALSO
.BR outcoind (1),
.BR outcoin-cli (1),
.BR outcoin-tx (1)
.SH AUTHORS
The Bitcoin Core developers

Please contribute if you find Outcoin Core useful. Visit
<https://outcoin.org/> for further information about the software.
The source code is available from
<https://github.com/outcoin-project/outcoin>.

This is experimental software.
Distributed under the MIT software license, see the accompanying file COPYING
or <https://opensource.org/licenses/MIT>
